require([  '../lib/elasticlunr/mustache.js',  '../lib/elasticlunr/elasticlunr.js',  'text!../elasticlunr/templates/question_view.mustache',  'text!../elasticlunr/templates/result_list.mustache',  'text!example_data.json',  'text!products_complete.json',  'text!example_index.json'], function (Mustache, elasticlunr, questionView, resultList, data, products, indexDump) {  var renderResultList = function (qs) {    $("#result-list-container")      .empty()      .append(Mustache.to_html(resultList, {results: qs}))  }  window.profile = function (term) {    console.profile('search')    idx.search(term)    console.profileEnd('search')  }  window.search = function (term) {    console.time('search')    idx.search(term)    console.timeEnd('search')  }  //specify which field to index  window.idx = elasticlunr(function () {      this.addField('id');      this.addField('title');      this.addField('date_published');      this.addField('region_id');      this.addField('region_title');      this.addField('description');      this.addField('product_jpg');      this.addField('thumbnail_150');      this.addField('thumbnail_300');      this.addField('keywords');      this.addField('tweet');  });  //adds documents to index  for (var key in JSON.parse(products).features) {    idx.addDoc({      'id': JSON.parse(products).features[key].properties.product_id,      'title': JSON.parse(products).features[key].properties.title,      'description': JSON.parse(products).features[key].properties.description,      'keywords': JSON.parse(products).features[key].properties.keywords,      'region_id': JSON.parse(products).features[key].properties.region_id,      'region_title': JSON.parse(products).features[key].properties.region_title    })  }  //idx.addDoc(JSON.parse(products).features);  //parsing json, used to show back the results on the screen  //The map() method creates a new array with the results of calling a provided function on every element in this array.  var questions = JSON.parse(products).features.map(function (raw) {    return {      id: raw.properties.product_id,      title: raw.properties.title,      date_published: raw.properties.date_published,      region_id: raw.properties.region_id,      region_title: raw.properties.region_title,      description: raw.properties.description,      featured: raw.properties.featured,      product_jpg: raw.properties.product_jpg,      thumbnail_150: raw.properties.thumbnail_150,      thumbnail_300: raw.properties.thumbnail_300,      keywords: raw.properties.keywords,      tweet: raw.properties.tweet    }  })  console.log('questions array: ');  console.log(questions);  renderResultList(questions);  //renderQuestionView(questions[0])  $('a.all').bind('click', function () {    renderResultList(questions)    $('input').val('')  })  var debounce = function (fn) {    var timeout    return function () {      var args = Array.prototype.slice.call(arguments),          ctx = this      clearTimeout(timeout)      timeout = setTimeout(function () {        fn.apply(ctx, args)      }, 100)    }  }  //debounce limits the rate at which a function can fire.  $('input').bind('keyup', debounce(function () {    console.log('keyup called');    console.log('this val');    console.log($(this).val());    if ($(this).val() < 2) {      //var config = $('#configuration').val();      //config.trim();      console.log('this val less than 2');      var json_config = null;    }    json_config = { fields: { title: {boost: 2}, description: {boost: 2}, keywords: {boost: 2}, region_id: {boost: 1}, region_title: {boost: 1}, id: {boost: 1} }, boolean: "AND" };    var query = $(this).val()    var results = null;    console.log('what is the query?');    console.log(query);    if (json_config == null) {        console.log("producting results");        results = idx.search(query);                results = idx.search(query).map(function (result) {            return questions.filter(function (q) {               //return q.id === parseInt(result.ref, 10)               return q.id === result.ref             })[0]        })    } else {        //results = idx.search(query, json_config).map(function (result) {          console.log("not producting results");          results = idx.search(query, json_config).map(function (result) {            return questions.filter(function (q) {               return q.id === result.ref             })[0]        })    }    console.log('what are the results?');    console.log(results);    if ($(this).val() === '') {        console.log("no characters");        renderResultList(questions);    } else {      renderResultList(results);    }  }))  //delegate is a jquery function that attaches a handler to one or more events that match the selector  /*  $("#result-list-container").delegate('li', 'click', function () {    var li = $(this)    var id = li.data('result-id')  })  */})